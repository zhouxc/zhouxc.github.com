<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Imanel's blog</title>
 <link href="http://imanel.org/atom.xml" rel="self"/>
 <link href="http://imanel.org/"/>
 <updated>2011-12-27T20:29:58+08:00</updated>
 <id>http://imanel.org/</id>
 <author>
   <name>Bernard Potocki</name>
   <email>bernard.potocki@imanel.org</email>
 </author>

 
 <entry>
   <title>How to install MySQL Ruby gem in OS X Snow Leopard</title>
   <link href="http://imanel.org/2011/04/how-to-install-mysql-ruby-gem-in-os-x-snow-leopard/"/>
   <updated>2011-04-04T00:00:00+08:00</updated>
   <id>http://imanel.org/2011/04/how-to-install-mysql-ruby-gem-in-os-x-snow-leopard</id>
   <content type="html">&lt;p&gt;I know this was posted multiple times by other people, but this information is scattered and hard to find so I'm posting quick summary.&lt;/p&gt;

&lt;p&gt;First of all you must download &lt;a href=&quot;http://dev.mysql.com/downloads/mysql/5.1.html&quot;&gt;MySQL binary&lt;/a&gt;. Be aware that ruby gem will not work with version newer than 5.1, and in Snow Leopard you should use 64-bit version.&lt;/p&gt;

&lt;p&gt;After installing it(it should land in /usr/local) you can start compiling mysql gem. In order to do so you need to specify arch flags and path to your mysql dir:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb75fb948&gt;&lt;/p&gt;

&lt;p&gt;Note that if you are using rvm then you shouldn't install it in @global gemset - bundler will not see that and will try to recompile it again. So you will need to run this command for every gemset you will be using.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Building WebSocket server in Ruby</title>
   <link href="http://imanel.org/2010/12/building-websocket-server-in-ruby/"/>
   <updated>2010-12-05T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/12/building-websocket-server-in-ruby</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://showmetheco.de/articles/2010/11/timtow-to-build-a-websocket-server-in-perl.html&quot;&gt;Vti's post&lt;/a&gt; about building WebSocket server inspired me to write another one, but this time about both server and client in Ruby.&lt;/p&gt;

&lt;p&gt;Currently we have couple of great implementations of WebSocket in Ruby - &lt;a href=&quot;http://github.com/igrigorik/em-websocket&quot;&gt;em-websocket&lt;/a&gt;, &lt;a href=&quot;http://github.com/gimite/web-socket-ruby&quot;&gt;web-socket-ruby&lt;/a&gt; or &lt;a href=&quot;http://rainbows.rubyforge.org/sunshowers&quot;&gt;sunshowers&lt;/a&gt; to name a few. And looking at each one of them I can see two things - they all are great, and they all are alone. What I mean?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt; alone says that there are 40 projects in Ruby connected to WebSocket. Some of them are basing one on another, but there are more than 15 server implementations from scratch. Only two support both Draft 75 and Draft 76. And only one support newer drafts. Am I only one who see the problem?&lt;/p&gt;

&lt;p&gt;That's why I built &lt;a href=&quot;http://github.com/imanel/libwebsocket&quot;&gt;LibWebSocket&lt;/a&gt; library whose main purpose is to eliminate the problem of aging server implementations - wrapper around multiple drafts of WebSocket with common API that any server implementation can build against. Thank's to that whole community will be able to gain instead of working independently. So how to get started?&lt;/p&gt;

&lt;h3&gt;Building server&lt;/h3&gt;

&lt;p&gt;Currently most popular Ruby WebSocket server is em-websocket(I'm also using it in my &lt;a href=&quot;http://github.com/socky&quot;&gt;Socky&lt;/a&gt; project) and I believe that currently it's the best implementation. So why don't start from building similar server which just couple of lines instead of huge library?&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb72f25a8&gt;&lt;/p&gt;

&lt;p&gt;And that's all! Of course it's just simplified implementation, but I think that shows what I'm talking about. No more handling events, checking version and implementing multiple drafts - it's all inside! And together with that we can also build client:&lt;/p&gt;

&lt;h3&gt;Building client&lt;/h3&gt;

&lt;p&gt;This one is more tricky but still most work is handled by LibWebsocket:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb72f2210&gt;&lt;/p&gt;

&lt;p&gt;This will allow to connecting, sending and receiving messages from WebSocket server in drafts #75 and #76(more vesions comming)&lt;/p&gt;

&lt;h3&gt;State and future&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/imanel/libwebsocket&quot;&gt;LibWebSocket&lt;/a&gt; is currently in very early state of development but I hope that it will move fast to stable version. You can now install it as gem and start using:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for &quot;\ngem install libwebsocket\n&quot;:String&lt;/p&gt;

&lt;p&gt;See project at github: &lt;a href=&quot;http://github.com/imanel/libwebsocket&quot;&gt;http://github.com/imanel/libwebsocket&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Socky Announcement</title>
   <link href="http://imanel.org/2010/10/socky-announcement/"/>
   <updated>2010-10-09T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/10/socky-announcement</id>
   <content type="html">&lt;p&gt;Meet Socky - the ultimate open-source, cross-platform, secure push server solution for your web applications! Socky uses standard WebSockets where available, with graceful fallback to Flash-based component making it usable even on mobile devices running iOS, Android and other Flash-enabled browsers.&lt;/p&gt;

&lt;p&gt;Socky project consists of two independent tools â€“ the Ruby-based push server and client-side library. Socky was developed with performance in mind - the server scales well among any number of hosts and can handle thousands of users on a single host making it perfect for things like chat, broadcasting and other real-time communication features.&lt;/p&gt;

&lt;p&gt;What makes Socky different from the competing products? It's is free of charge, doesn't require any external servers, uses web standards where possible and has few dependencies making it the easiest, cheapest and most universal solution. Over 700 downloads during the first 4 months of development speak for themselves!&lt;/p&gt;

&lt;p&gt;Key features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSL-enabled&lt;/li&gt;
&lt;li&gt;compatible with Ruby 1.8 and 1.9, jruby and rubinius&lt;/li&gt;
&lt;li&gt;plugin for rails 2.2+ available&lt;/li&gt;
&lt;li&gt;no 3rd party servers involved&lt;/li&gt;
&lt;li&gt;high scalability&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Supported platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google Chrome or any other browser supporting WebSockets or Flash&lt;/li&gt;
&lt;li&gt;iOS 4.2+&lt;/li&gt;
&lt;li&gt;Android with Flash/Flash Lite&lt;/li&gt;
&lt;li&gt;Any other device with WebSockets or Flash/Flash Lite support&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Find out more about Socky at &lt;a href=&quot;http://imanel.org/projects/socky&quot;&gt;http://imanel.org/projects/socky&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS3 in every browser with SASS and PIE</title>
   <link href="http://imanel.org/2010/07/css3-in-every-browser-with-sass-and-pie/"/>
   <updated>2010-07-18T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/07/css3-in-every-browser-with-sass-and-pie</id>
   <content type="html">&lt;p&gt;Recently, more and more popular is the use of the HTML5 and CSS3. Everyone rushed to them and this is perfectly understandable - after all, developers will be able to bet on semantic instead of doing work arounds for some browsers. But the problem is that at the moment even the &quot;modern&quot; browsers have problems handling some common attributes. The most common example is the border-radius, which has up to three versions - so if we want all browsers display the same rounding, we need to write this as:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb72fcdf0&gt;&lt;/p&gt;

&lt;p&gt;And this isn't &quot;uniformity&quot;, but hopefully that for some time only one of them will be needed. At the moment we need to put the whole set every time. And we often forget - as the example &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt; who sometimes remember and sometimes not to use &quot;border-radius.&quot;&lt;/p&gt;

&lt;p&gt;Fortunately, if you use the help such as &lt;a href=&quot;http://sass-lang.com&quot;&gt;SASS&lt;/a&gt; (available for many programming languages) then the problem disappears. This framework allows us to define the &quot;mixins&quot; which then can be attached anywhere without the need to rewrite the same code several times (according to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Don't_repeat_yourself&quot;&gt;DRY&lt;/a&gt; mantra) The easiest way would be to show how:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb72fca58&gt;&lt;/p&gt;

&lt;p&gt;Mixins themselves are not rendered, but only attached to the other classes so the end user code will be as in the first example.&lt;/p&gt;

&lt;p&gt;Some ask why not use the class instead of id - the answer is simple: the separation of HTML and CSS. Because if one day you'll want to get rid of the rounded corners then with one is easier: to remove the entry from the appropriate id or search through all the HTML pages and remove the class?&lt;/p&gt;

&lt;p&gt;There remains the problem of one browser - namely Internet Explorer. It does not support the CSS3 specification and at the moment is still very popular. Thats why there are libraries like the &lt;a href=&quot;http://css3pie.com&quot;&gt;PIE&lt;/a&gt; - to facilitate this. For the above border-radius example(and many others) it require only to attach a .htc file and attribute will work well in IE6, IE7 and IE8. The specification requires, however, to attach it to every class in which CSS is used - so our definition this time will look like this:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb72fc6c0&gt;&lt;/p&gt;

&lt;p&gt;This is another line of which you must remember. And this is the best place where you can see the beauty of SASS - just add this line in one place and will work everywhere. Thus, the final version of the code will look like this:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb72fc328&gt;&lt;/p&gt;

&lt;p&gt;I hope that this solution will help you to create beautiful and semantic pages a lot easier.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web standards in mobile browsers</title>
   <link href="http://imanel.org/2010/06/web-standards-in-mobile-browsers/"/>
   <updated>2010-06-28T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/06/web-standards-in-mobile-browsers</id>
   <content type="html">&lt;p&gt;For the past few weeks I focused on developing &lt;a href=&quot;http://github.com/socky/socky-server-ruby&quot;&gt;Socky&lt;/a&gt; - new WebSocket based push server for Ruby on Rails. Its main advantage was to be working well in places where there is no flash - like iPhone or iPad. It is therefore obvious that I became very sensitive to standard implementation in so called &quot;modern browsers&quot; - also mobile ones. So, taking the opportunity of just released iOS4, I decided to write a few words about standard support in mobile browsers.&lt;/p&gt;

&lt;p&gt;First tested was the latest iOS4 - loudly advertised as a strong HTML5 supporter. A set of rapid tests showed that the most important elements actually works flawlessly - audio and video, geolocation or SVG. Also, elements such as CSS 3 border-radius, CSS animations and reflections are working properly. But the most important feature for me, WebSockets, is missing. I don't understand why this protocol isn't there, when in lately released Safari 5 it wasn't issue. So how are users of the system be able to use chat, or HTML multiplayer games? There is also no support for @font-face or Web Workers. Maybe we see in the near future?&lt;/p&gt;

&lt;p&gt;The second largest mobile system is Android - I tested version 2.2(not yet available everywhere). It's not disappointing - most of the tests passed without error. As in the iOS audio and video tags work properly, geolocation and CSS 3 too, and, moreover, does @font-face. Unfortunately, there also is no support for WebSocket (which Google Chrome has for a long time) - but fortunately, working flash eliminates this problem (thanks to &lt;a href=&quot;http://github.com/gimite/web-socket-js&quot;&gt;web-socket-js&lt;/a&gt;) I was surprised by the lack of SVG support - I understand that this is a very processor aggravating technology, but lack of it is very arduous.&lt;/p&gt;

&lt;p&gt;Last discussed system is a WebOS version 1.4.1 (there should be new version 1.4.5 in the next few days) - system is based entirely on HTML and CSS, so you would expect the best support for standards. Unfortunately, there is some disappointment - most of the tests pass, but from presented systems this one have highest number of unsupported technology - @font-face, WebSockets, SVG, and geolocation. Hopefully the next update will improve browser a little.&lt;/p&gt;

&lt;p&gt;All tests were performed using a &lt;a href=&quot;http://www.modernizr.com&quot;&gt;Modernizr&lt;/a&gt;, and some of them tested manually (audio, video, WebSockets and geolocation)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cucumber testing for multiple users - continuation</title>
   <link href="http://imanel.org/2010/03/cucumber-testing-for-multiple-users-continuation/"/>
   <updated>2010-03-03T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/03/cucumber-testing-for-multiple-users-continuation</id>
   <content type="html">&lt;p&gt;A little over a month ago you could read my article about real-time applications testing using Cucumber. In the meantime a new version of Cucumber emerged with &lt;a href=&quot;http://github.com/jnicklas/capybara&quot;&gt;Capybara&lt;/a&gt; support added. Since the previous method posed several problems during system to system migration (especially Snow Leopard hacks occasionally did not work in other systems) we'll try a new approach - this time working OOTB in every system.&lt;/p&gt;

&lt;p&gt;As always, I will not describe the installation nor configuration process (you can find this in Capybara's documentation) so let's get straight to the practice. By default Capybara does not allow you to open multiple browser instances. According to the main developer - &quot;it's impossible by design&quot;. As they say -  It's impossible. But doable ;) After taking a glance at Capybara's code (I must admit that it is written quite nice) I found a couple of points where you could bypass this annoying limitation.&lt;/p&gt;

&lt;p&gt;It is time to get to work. Let's create a new set of steps in the features/step_definitions - call it e.g &quot;selenium_steps.rb&quot;. For now let's assume that we want to open two browser instances (you can change that to different value if you want to). Create a method examining whether any browser instance exists (and creating new one if there's none):&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb7307bd8&gt;&lt;/p&gt;

&lt;p&gt;The second line verifies that you use a correct test engine (in this case selenium). &quot;current_url&quot; method call guarantees that browser current state won't be lost during process. Next save to a variable state of the browser and then reset it so Capybara can open a new instance. Why not do that by ourselves? The reason is simple - Capybara uses quite a lot of tricks so you could run into potential problems after some code refactoring done by developers. For now this method is sufficient and guarantees stable (or at least predictable) behavior. Next call to &quot;current_url&quot; will open a new brower. Finally restore browser to its initial state. Look at the save/restore browser state functions code below:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb7307840&gt;&lt;/p&gt;

&lt;p&gt;As you can see, this method is very simple - it only acquires the current session (for Selenium) and &quot;driver&quot; (which is actually a reference to the Selenium server instance).&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb73074a8&gt;&lt;/p&gt;

&lt;p&gt;There's no magic here too - you just save the session state and override reference to the Selenium Server. Now we can write browser change functions with ease:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb7307110&gt;&lt;/p&gt;

&lt;p&gt;This way we may use any number of browsers to test Juggernaut, WebSockets and different functionalities (even a simple, ajax communication between users, thus saving time needed to reauth in subsequent requests) in parallel.
Notice that during Cucumber shutdown phase not all browser instances will be closed (only the active one). To fix this add this code to the one of initialization (features/support) files:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb7306d78&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Testing Juggernaut using Cucumber and Selenium</title>
   <link href="http://imanel.org/2010/01/testing-juggernaut-using-cucumber-and-selenium/"/>
   <updated>2010-01-24T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/01/testing-juggernaut-using-cucumber-and-selenium</id>
   <content type="html">&lt;p&gt;During tests development you usually use well-known and tested solutions like &lt;a href=&quot;http://rspec.info&quot;&gt;RSpec&lt;/a&gt; or &lt;a href=&quot;http://cukes.info&quot;&gt;Cucumber&lt;/a&gt; + &lt;a href=&quot;http://github.com/brynary/webrat&quot;&gt;Webrat&lt;/a&gt;. They let you develop in a fast and convinient way. Unfortunately there are times when you need to get you hands dirty. If your application use only javascript then &lt;a href=&quot;http://celerity.rubyforge.org&quot;&gt;Celerity&lt;/a&gt; may help. But as soon as you incorporate Flash or Java into your application things get much harder. For such situations the &lt;a href=&quot;http://seleniumhq.org&quot;&gt;Selenium&lt;/a&gt; framework should be well-suited. It lets you test your app by simulating user actions through any (supported) web browser. Connection of Selenium and Cucumber seem to be very interesting option too - for more details look at Cucumber wiki.&lt;/p&gt;

&lt;p&gt;By default Cucumber uses one browser to open your application and perform selected tests. But from time to time you may need more instances to run in parallel mode - e.g to test real-time user communication. Luckily there is an easy way to override Selenium scripts in Cucumber letting you open another browser instance and switch between them. You just need to add following lines into &quot;env.rb&quot; (or selenium dedicated configuration file).&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb730da74&gt;&lt;/p&gt;

&lt;p&gt;The second line is necessary to proper initialization of the second browser by Cucumber. After that, you just need to write appropriate steps for Selenium, say:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb730d6dc&gt;&lt;/p&gt;

&lt;p&gt;By default the first browser will be active one. But you should not forget that lastly used browser is not restarted between two consecutive tests. You should always switch to the first browser at the end of your test. In addition, there are two useful steps:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb730d344&gt;&lt;/p&gt;

&lt;p&gt;First one ensures that all scripts are loaded before moving on to the next steps. Second one gives Juggernaut time to deliver messages. With this configuration you can use all delivered by Cucumber steps without worrying about compatibility problems.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Accents in Sphinx</title>
   <link href="http://imanel.org/2010/01/accents-in-sphinx/"/>
   <updated>2010-01-24T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/01/accents-in-sphinx</id>
   <content type="html">&lt;p&gt;When writing web applications you need to use full-text search from time to time. &lt;a href=&quot;http://www.sphinxsearch.com&quot;&gt;Sphinx&lt;/a&gt; or &lt;a href=&quot;http://ferret.davebalmain.com/trac&quot;&gt;Ferret&lt;/a&gt; may be of interest to you in such situation. I do prefer the Sphinx because of its speed and ease of use. But it can pose a problem for you from time to time - especially when searching in languages with accents. By default it does not convert UTF-8 properly - Sphinx treats characters outside the ASCII default set as the separation marks. You can find many pages with a simple solution to this issue - just add appropriate conversion rules to the configuration file:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for #&amp;lt;String:0xb73131a4&gt;&lt;/p&gt;

&lt;p&gt;It turns out that it is not enough - even after adding this piece of code some of the polish (that's my native language) signs were not recognized properly. After some searching I found a reason - polish &quot;tails&quot; were written not as characters in UTF-8 but as an html entities. There's a simple and clean solution - add following line to your configuration file:&lt;/p&gt;

&lt;p&gt;Liquid error: undefined method `join' for &quot;\nhtml_strip: 1\n&quot;:String&lt;/p&gt;

&lt;p&gt;And now everything should work great - the only drawback is that the Sphinx ignores accents and converts them into ASCII characters. But that's a low price in exchange for functionality that Sphinx gives to you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby-flavored shoes</title>
   <link href="http://imanel.org/2010/01/ruby-flavored-shoes/"/>
   <updated>2010-01-03T00:00:00+08:00</updated>
   <id>http://imanel.org/2010/01/ruby-flavored-shoes</id>
   <content type="html">&lt;p&gt;Recently, working on my BSc thesis, I had to choose programming language and some framework to create graphical interface. The first thing that came to my mind was C++ and QT library. But that would be too easy :). It's time to learn something new. Something connected with Ruby (cause that's the language I currently work with). There's a couple of nice bindings for QT in Ruby, but all of them seemed not enough &quot;ruby-way&quot; to me. Most of them didn't comfort to some of my needs (multi-platform, should work OOTB, with acceptable performance) too. Finally I found really interesting framework, namely, Ruby Shoes.&lt;/p&gt;

&lt;p&gt;After quick installation on OS X, virtualised Windows and Ubuntu it is time for our beloved &quot;hello world&quot; test. Next, few more advanced test. Everything works great. Applications work on all three platforms,  contain Ruby Shoes (statically linked), so there's no need for any dependencies installation. The only problem is weak support for gems containing native extensions. This especially shows with RMagick. It compiles and starts but as soon as you try to call any function it fails with message that some (existing) bundle doesn't exist. You should also be careful when searching for documentation - not every function is described in RDoc. If you can't find one then try to look into manual or google it.&lt;/p&gt;
</content>
 </entry>
 

</feed>
